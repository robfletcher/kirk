package strikt.internal.opentest4j

import org.opentest4j.AssertionFailedError
import org.opentest4j.ValueWrapper
import strikt.api.Status.Failed
import strikt.internal.AssertionNode

internal class AtomicAssertionFailure(
  override val message: String,
  private val failure: AssertionNode<*>
) : AssertionFailedError(null, (failure.status as? Failed)?.cause) {
  override fun isActualDefined(): Boolean =
    (failure.status as? Failed)?.comparison != null

  override fun getActual(): ValueWrapper? =
    (failure.status as? Failed)
      ?.comparison
      ?.actual
      ?.let(ValueWrapper::create)

  override fun isExpectedDefined(): Boolean =
    (failure.status as? Failed)?.comparison != null

  override fun getExpected(): ValueWrapper? =
    (failure.status as? Failed)
      ?.comparison
      ?.expected
      ?.let(ValueWrapper::create)
}

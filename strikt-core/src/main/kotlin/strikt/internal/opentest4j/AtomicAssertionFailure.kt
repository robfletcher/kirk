package strikt.internal.opentest4j

import org.opentest4j.AssertionFailedError
import org.opentest4j.ValueWrapper
import strikt.api.Status.ComparisonFailed
import strikt.api.Status.Failed
import strikt.internal.AssertionResult
import strikt.internal.reporting.writePartialToString

internal class AtomicAssertionFailure(
  private val failure: AssertionResult<*>
) : AssertionFailedError(null, (failure.status as? Failed)?.cause) {
  override val message: String?
    get() = failure.writePartialToString()

  override fun isActualDefined(): Boolean = failure.status is ComparisonFailed

  override fun getActual(): ValueWrapper? =
    (failure.status as? ComparisonFailed)
      ?.actual
      ?.let(ValueWrapper::create)

  override fun isExpectedDefined(): Boolean = failure.status is ComparisonFailed

  override fun getExpected(): ValueWrapper? =
    (failure.status as? ComparisonFailed)
      ?.expected
      ?.let(ValueWrapper::create)
}
